function [R,storage_new_init_shape] = learn_single_regressor...
    ( ShapeModel, DataVariation, Data, new_init_shape, options )

%%%%%%%% properties %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 1. Using randomly ground-truth of image as initial shape for others.
%% 2. Using multi-scale images.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

nData = length(Data);
%nData = 10;

%% the fixed parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
shape_dim  = size(ShapeModel.MeanShape,1);
n_points   = shape_dim/2;
n_cascades = options.n_cascades;

current_cascade = options.current_cascade;
n_init_randoms  = options.n_init_randoms;
desc_size       = options.descSize;
desc_bins       = options.descBins;
desc_dim        = 8 * desc_bins * desc_bins; % xx_sift

reg_term        = 100; %nData; % regularization term is the number of training.

%% debug flag
debug = 0;

%% initial matrices used for storing descriptors and delta shape %%%%%%%%%%
storage_init_shape = zeros(nData*n_init_randoms,shape_dim);
storage_gt_shape   = zeros(nData*n_init_randoms,shape_dim);
storage_new_init_shape = zeros(nData*n_init_randoms,shape_dim);
storage_init_desc  = zeros(nData*n_init_randoms,desc_dim*n_points);
storage_del_shape  = zeros(nData*n_init_randoms,shape_dim);
storage_bbox       = zeros(nData*n_init_randoms,4);
storage_transM     = zeros(nData*n_init_randoms,2,3);

%% set the current canvas size for multi-scale feature
current_scale = cascade_img_scale(options.scaleFactor,current_cascade,...
    n_cascades);

for idata = 1 : nData
    
    %% the information of i-th image
    %disp(Data(idata).img);
    disp(['Image: ' num2str(idata)]);
        
    img   = imread(Data(idata).img);
    shape = Data(idata).shape;
    
    %% if the first cascade
    if ( current_cascade == 1 )
        
        %% if detect face using viola opencv
        %boxes = detect_face( img , options );
        
        %% if using ground-truth
        boxes = [];
        
        %% predict the face box
        rect = get_correct_region( boxes, shape, 1 );
        
        %% predict initial location
        [initX,initY,width,height] = init_face_location( rect );
        
        %% randomize n positions for initial shapes
        [rInit,rWidth,rHeight] = random_init_position( ...
            initX, initY, width, height, DataVariation, n_init_randoms );
        
        %% randomize which shape is used for initial position
        rIdx = randi([1,nData],n_init_randoms);
        
        %% iterations of n initial points
        for ir = 1 : n_init_randoms
            
            %% get random positions and inital shape indexs
            init_x = rInit(ir,1);
            init_y = rInit(ir,2);
            width  = rWidth(ir);
            height = rHeight(ir);
            idx    = rIdx(ir);
            
            %% align the initial shape %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            init_shape = Data(idx).shape; %% get randomly shape from others
            
            % using mean-shape
            % init_shape = ShapeModel.MeanShape;
            
            init_shape = align_init_shape(...
                   shape_2_vec(init_shape), init_x, init_y, width, height);
            
            [aligned_init_shape, cropIm] = align_to_mean_shape(...
                ShapeModel, img , vec_2_shape(init_shape.XY) , options );
                        
            [aligned_true_shape] = align_shape(...
                aligned_init_shape.TransM,shape_2_vec(shape));
            
            %% scale coarse to fine %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            cropIm_scale = imresize(cropIm,current_scale);
            clear cropIm;
            aligned_init_shape.XY = aligned_init_shape.XY * current_scale;
            aligned_true_shape = aligned_true_shape * current_scale;           
            
            if debug
                figure(1); imshow(cropIm_scale); hold on;
                draw_shape(aligned_init_shape.XY(1:2:end),...
                    aligned_init_shape.XY(2:2:end),'y');
                draw_shape(aligned_true_shape(1:2:end),...
                    aligned_true_shape(2:2:end),'r');
                hold off;
                pause;
            end    
            
            storage_bbox((idata-1)*n_init_randoms+ir,:) = ...
                               getbbox(vec_2_shape(aligned_init_shape.XY));
            
            %% compute the descriptors and delta_shape %%%%%%%%%%%%%%%%%%%%
            
            % storing the initial shape
            storage_init_shape((idata-1)*n_init_randoms+ir,:) = ...
                aligned_init_shape.XY;
            
            % storing the the descriptors
            tmp = local_descriptors( cropIm_scale, ...
                vec_2_shape(aligned_init_shape.XY),...
                desc_size, desc_bins, options );
            storage_init_desc((idata-1)*n_init_randoms+ir,:) = tmp(:);
            
            % storing delta shape
            tmp_del = aligned_init_shape.XY - aligned_true_shape;
            shape_residual = bsxfun(@rdivide, vec_2_shape(tmp_del), ...
                            storage_bbox((idata-1)*n_init_randoms+ir,3:4));
            
            storage_del_shape((idata-1)*n_init_randoms+ir,:) = ...
                                               shape_2_vec(shape_residual);
            
            storage_gt_shape((idata-1)*n_init_randoms+ir,:) = ...
                                                        shape_2_vec(shape);
            
            
            % storing the transformation matrices
            storage_transM((idata-1)*n_init_randoms+ir,:,:) = ...
                                                 aligned_init_shape.TransM;
            
        end
        
    else
        
        % for higher cascaded levels
        for ir = 1 : n_init_randoms
            
            init_shape = new_init_shape((idata-1)*n_init_randoms+ir,:);
            
            [aligned_init_shape, cropIm] = align_to_mean_shape(...
                ShapeModel, img , vec_2_shape(init_shape'), options );
            
            [aligned_true_shape] = align_shape(...
                aligned_init_shape.TransM,shape_2_vec(shape));
            
            if debug
                figure(1); imshow(cropIm); hold on;
                draw_shape(aligned_init_shape.XY(1:2:end),...
                    aligned_init_shape.XY(2:2:end), 'y');
                draw_shape(aligned_true_shape(1:2:end),...
                    aligned_true_shape(2:2:end), 'r');
                hold off;
                pause;
            end
            
            %% scale coarse to fine %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %% scale coarse to fine %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            cropIm_scale = imresize(cropIm,current_scale);
            clear cropIm;
            aligned_init_shape.XY = aligned_init_shape.XY * current_scale;
            aligned_true_shape = aligned_true_shape * current_scale;            
            
            %% compute the descriptors and delta_shape %%%%%%%%%%%%%%%%%%%%
            
            storage_bbox((idata-1)*n_init_randoms+ir,:) = ...
                                getbbox(vec_2_shape(aligned_init_shape.XY));
            
            %% compute the descriptors and delta_shape %%%%%%%%%%%%%%%%%%%%
            
            % storing the initial shape
            storage_init_shape((idata-1)*n_init_randoms+ir,:) = ...
                aligned_init_shape.XY;
            
            % storing the the descriptors
            tmp = local_descriptors( cropIm_scale, ...
                vec_2_shape(aligned_init_shape.XY),...
                desc_size, desc_bins, options );
            storage_init_desc((idata-1)*n_init_randoms+ir,:) = tmp(:);
            
            % storing delta shape
            tmp_del = aligned_init_shape.XY - aligned_true_shape;
            shape_residual = bsxfun(@rdivide, vec_2_shape(tmp_del), ...
                            storage_bbox((idata-1)*n_init_randoms+ir,3:4));
            
            storage_del_shape((idata-1)*n_init_randoms+ir,:) = ...
                                               shape_2_vec(shape_residual);
            
            storage_gt_shape((idata-1)*n_init_randoms+ir,:) = ...
                                                        shape_2_vec(shape);
            
            
            % storing the transformation matrices
            storage_transM((idata-1)*n_init_randoms+ir,:,:) = ...
                aligned_init_shape.TransM;
            
            
        end
        
    end
    
    
    clear img;
    clear cropIm_scale;
    clear shape;
    
end

%% solving multivariate linear regression %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp('solving linear regression problem...');
R = linreg( storage_init_desc, storage_del_shape, reg_term );


%% updading the new shape %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp('updadting the shape...');
del_shape = regress( storage_init_desc, R );

nsamples = size(storage_init_desc,1);

for isample = 1 : nsamples
    
    origin_del = bsxfun(@times, vec_2_shape(del_shape(isample,:)'), ...
                            storage_bbox(isample,3:4));    
    
    shape      = storage_init_shape(isample,:) - shape_2_vec(origin_del)';

    
    shape      = shape / current_scale;
    TransM     = reshape(storage_transM(isample,:,:),2,3);
    storage_new_init_shape(isample,:) = ...
                                    invert_aligned_shape( TransM, shape );
    
end

%% compute errors

err = zeros(nsamples,1);

for i = 1:nsamples
    
    pr_shape = storage_new_init_shape(i,:);
    gt_shape = storage_gt_shape(i,:);
    
    err(i) = rms_err( vec_2_shape(pr_shape'), vec_2_shape(gt_shape'), options);   
    
end

disp(['ERR average: ' num2str(100*mean(err))]);

clear storage_init_shape;
clear storage_gt_shape;
clear storage_init_desc;
clear storage_del_shape;
clear storage_transM;

